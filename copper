// node
var fs = require('fs')
// npm
var chalk = require('chalk')
var Decimal = require('decimal.js')
var args = require('yargs').argv

// local
var Copper = require('./lib/copper')
var copper = new Copper()

var keys
if(args.wallet) {
  keys = copper.loadBitcoinWallet(args.wallet)
  if(keys) {
    console.log('wallet:', args.wallet, chalk.green(keys.length), 'keys read.')
  } else {
    console.log('error loading wallet:', args.wallet)
  }
}

if(args._.length == 1) {
  var firstWord = args._[0]
  if(copper.isBitcoinPublicAddress(firstWord)) {
    args._.unshift('balance')
  }
}

var cmd = args._.shift() || 'balance'

if(cmd === 'balance') {

  if(!keys) {
    if(args._.length > 0) {
      var firstWord = args._.shift()
      keys = [ copper.keyFromAddress(firstWord) ]
    }
  }

  if(keys) {
    if(keys.length > 1) {
      console.log('gathering balances for', keys.length, 'keys')
    }
    copper.balances(keys).then(function(balances){
      var rows = []
      for(var idx in keys) {
        rows.push({pub:keys[idx].pub, balance:balances[idx]})
      }
      rows.sort(function(a,b){return a.balance.minus(b.balance).toFixed()})
      var values = rows.filter(function(row){return row.balance > 0})
      values.forEach(function(row){
        console.log(row.pub, row.balance.toString())
      })
      var total = balances.reduce(function(memo, balance){return memo.plus(balance)}, new Decimal(0))
      console.log('Total:', chalk.green(total), 'BTC')
    })
  }
}

if(cmd === 'new') {
  var key = copper.newKey()
  console.log('prv:', chalk.red(key.priv))
  console.log('pub:', chalk.green(key.pub))
}

if(cmd === 'tx') {
  var from = args._.shift()
  console.log('tx', 'in', args.in, 'out', args.out, 'amount', args.amount)
  var walletKey = copper.keyFind(keys, args.in)
  if(walletKey) {
    var inKey = copper.fromWIF(walletKey.priv)
    copper.unspents(walletKey).then(function(unspents){
      console.log('unspents', unspents.map(function(u){return u.value/100000000+"btc"}))
      tx = copper.transaction()
      var inHash = unspents[0].tx_hash
      tx.addInput(inHash, 0)
    })
  } else {
    console.log('no private key found for', args.in)
  }
}

